{
    "swagger": "2.0",
    "info": {
        "description": "This is an API Documentation for Sports Aggregation Platform (SAP)",
        "title": "SAP",
        "contact": {
            "name": "Amit",
            "email": "amit.m@outlook.com"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/cache/get-cache": {
            "post": {
                "description": "Endpoint to read cache data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cache-Service"
                ],
                "summary": "Get Cache Data",
                "parameters": [
                    {
                        "description": "GetCacheReq model is used",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.GetCacheReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetCacheResp"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetCacheResp"
                        }
                    }
                }
            }
        },
        "/core/get-transfer-user-statement": {
            "post": {
                "description": "Get Transfer User Statement API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Transfer User Statement API",
                "parameters": [
                    {
                        "description": "GetAllBetsReqDto model is used",
                        "name": "GetUserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.GetAllBetsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/core/getevents": {
            "post": {
                "description": "Get Events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Events",
                "parameters": [
                    {
                        "description": "GetEventsReqDto model is used",
                        "name": "GetEvents",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetEventsReqDto"
                        }
                    }
                }
            }
        },
        "/core/getliveevents": {
            "post": {
                "description": "Get Live Events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Live Events",
                "parameters": [
                    {
                        "description": "GetLiveEventsReqDto model is used",
                        "name": "GetLiveEvents",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetLiveEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetLiveEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.GetLiveEventsReqDto"
                        }
                    }
                }
            }
        },
        "/core/getmarkets": {
            "post": {
                "description": "Get Markets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Markets",
                "parameters": [
                    {
                        "description": "GetMarketsReqDto model is used",
                        "name": "GetMarkets",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetMarketsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_core.GetMarketsReqDto"
                        }
                    }
                }
            }
        },
        "/core/getsports": {
            "post": {
                "description": "Get Sports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Sports",
                "parameters": [
                    {
                        "description": "GetSportsReqDto model is used",
                        "name": "GetSports",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsRespDto"
                        }
                    }
                }
            }
        },
        "/core/sportsbet": {
            "post": {
                "description": "Bet Placement Async Endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Place Bet",
                "parameters": [
                    {
                        "description": "PlaceBetReqDto model is used",
                        "name": "SportsBet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.PlaceBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.PlaceBetRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.PlaceBetRespDto"
                        }
                    }
                }
            }
        },
        "/core/userbet-status": {
            "post": {
                "description": "User's last bet status - to support Async Bet Placement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "User Bet Status",
                "parameters": [
                    {
                        "description": "UserBetStatusReqDto model is used",
                        "name": "UserBetStatus",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.UserBetStatusReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.UserBetStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.UserBetStatusRespDto"
                        }
                    }
                }
            }
        },
        "/feed/Open-bets": {
            "post": {
                "description": "To get list of Open Bets in an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Open Bets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OpenBetsReqDto model is used",
                        "name": "OpenBets",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.OpenBetsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.OpenBetsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.OpenBetsRespDto"
                        }
                    }
                }
            }
        },
        "/feed/add-market": {
            "post": {
                "description": "To notify SAP to add Market in the system if not present. This helps to maintain the market status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Add Market API",
                "parameters": [
                    {
                        "description": "AddMarket model is used",
                        "name": "AddMarket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.AddMarket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/feed/bets-result": {
            "post": {
                "description": "Bets Result for multiple bets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Bets Result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsResultReqDto model is used",
                        "name": "BetsResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.BetsResultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetsResultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetsResultRespDto"
                        }
                    }
                }
            }
        },
        "/feed/bets-status": {
            "post": {
                "description": "Bets Status for multiple bets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Bets Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsStatusReqDto model is used",
                        "name": "BetsStatus",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.BetsStatusReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetsStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetsStatusRespDto"
                        }
                    }
                }
            }
        },
        "/feed/cancel-bets": {
            "post": {
                "description": "Bets Cancel for multiple bets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Cancel Bets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CancelBetReqDto model is used",
                        "name": "PlaceBet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.CancelBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.CancelBetRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.CancelBetRespDto"
                        }
                    }
                }
            }
        },
        "/feed/get-is-matched-status": {
            "post": {
                "description": "GetIsMatchedStatus takes a array of BetIds and returns weather the bet is matched or not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Get isMatched Bet status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetMatchedBetsReqDto model is used",
                        "name": "GetIsMatchedStatus",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.GetMatchedBetsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetMatchedBetsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetMatchedBetsRespDto"
                        }
                    }
                }
            }
        },
        "/feed/license-status": {
            "post": {
                "description": "GetLicenseStatus checks operators current license status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Get License status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetLicenseStatusReqDto model is used",
                        "name": "GetLicenseStatus",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.GetLicenseStatusReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetLicenseStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.GetLicenseStatusRespDto"
                        }
                    }
                }
            }
        },
        "/feed/markets-result": {
            "post": {
                "description": "Markets Result for multiple markets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Markets Result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "MarketsResultReqDto model is used",
                        "name": "MarketsResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.MarketsResultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.MarketsResultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.MarketsResultRespDto"
                        }
                    }
                }
            }
        },
        "/feed/place-bet": {
            "post": {
                "description": "Bet Placement Async Endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Place Bet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "PlaceBetReqDto model is used",
                        "name": "PlaceBet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.PlaceBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.PlaceBetRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.PlaceBetRespDto"
                        }
                    }
                }
            }
        },
        "/feed/seemless-user-statement": {
            "post": {
                "description": "Get Seemless User Statement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Get Seemless User Statement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "SeemlessUserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.SeemlessUserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.SeemlessUserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/feed/sportradar-cancel-bet": {
            "post": {
                "description": "Bets Cancel for single sportradar bets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Cancel SportRadar Bet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "SportRadarCancelBetReqDto model is used",
                        "name": "PlaceBet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.SportRadarCancelBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.SportRadarCancelBetRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.SportRadarCancelBetRespDto"
                        }
                    }
                }
            }
        },
        "/feed/test-signature": {
            "post": {
                "description": "To test signature functionality",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Test Signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "ProvidersReqDto model is used",
                        "name": "TestSignature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.ProvidersReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/feed/transfer-user-statement": {
            "post": {
                "description": "Get Transfer User Statement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Get Transfer User Statement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "TransferUserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/feed/user-login": {
            "post": {
                "description": "User Login to get Session Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "AuthReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthRespDto"
                        }
                    }
                }
            }
        },
        "/feed/user-statement": {
            "post": {
                "description": "List Transactions of a user. Pagination is present. A maximum of 50 Transactions in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Get User Statement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "UserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/feed/validate-odds": {
            "post": {
                "description": "Validate Odds endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed-Service"
                ],
                "summary": "Validate Odds",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hash Signature",
                        "name": "Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "PlaceBetReqDto model is used",
                        "name": "ValidateOdds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.PlaceBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.ValidateOddsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.ValidateOddsRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/average-load": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "AverageLoad is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "DefaultReqDto model is used",
                        "name": "AverageLoad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DefaultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/cache-read": {
            "post": {
                "description": "Will respond back after cache read.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "CacheRead is a function to test system with cache read",
                "parameters": [
                    {
                        "description": "DefaultReqDto model is used",
                        "name": "CacheRead",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DefaultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/cancel-orders": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "CancelOrders is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "ListCancelOrdersReq model is used",
                        "name": "CancelOrders",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ListCancelOrdersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BFCancelOrdersResp"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/response.BFCancelOrdersResp"
                        }
                    }
                }
            }
        },
        "/loadtest/cleared-orders": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "ClearedOrders is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "ListClearedOrdersReq model is used",
                        "name": "ClearedOrders",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ListClearedOrdersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BFClearedOrdersResp"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/response.BFClearedOrdersResp"
                        }
                    }
                }
            }
        },
        "/loadtest/current-orders": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "CurrentOrders is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "ListCurrentOrdersReq model is used",
                        "name": "CurrentOrders",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ListCurrentOrdersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BFCurrentOrdersResp"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/response.BFCurrentOrdersResp"
                        }
                    }
                }
            }
        },
        "/loadtest/database-read": {
            "post": {
                "description": "Will respond back after database read.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "DatabaseRead is a function to test system with database read",
                "parameters": [
                    {
                        "description": "DefaultReqDto model is used",
                        "name": "DatabaseRead",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DefaultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/database-write": {
            "post": {
                "description": "Will respond back after database write.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "DatabaseWrite is a function to test system with database write",
                "parameters": [
                    {
                        "description": "DatabaseWriteReqDto model is used",
                        "name": "DatabaseWrite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DatabaseWriteReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/end-to-end": {
            "post": {
                "description": "Will respond back getting response from L1-\u003eL2.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "EndToEnd is a function to test system with L3-L2-L1 latency",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/get-bfmetrics": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "GetBFMetrics is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "DefaultReqDto model is used",
                        "name": "GetBFMetrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DefaultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/layer-one-betFair": {
            "post": {
                "description": "Will respond back getting response from L1.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "LayerOneBetFair is a function to test system with L3-L1 latency",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/layer-one-dream": {
            "post": {
                "description": "Will respond back getting response from L1.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "LayerOneDream is a function to test system with L3-L1 latency",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/layer-one-sportradar": {
            "post": {
                "description": "Will respond back getting response from L1.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "LayerOneSportRadar is a function to test system with L3-L1 latency",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/layer-two": {
            "post": {
                "description": "Will respond back getting response from L2.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "LayerTwo is a function to test system with L3-L2 latency",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/loadtest/login": {
            "post": {
                "description": "Will respond back after 50ms sleep.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "loadtest"
                ],
                "summary": "Login is a function to test system with 50ms average response time",
                "parameters": [
                    {
                        "description": "DefaultReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.DefaultReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.DefaultRespDto"
                        }
                    }
                }
            }
        },
        "/opadmin/get-open-bets": {
            "post": {
                "description": "Get Open Bets For Operators",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Get Open Bets For Operators",
                "parameters": [
                    {
                        "description": "OpenBetsReqDto model is used",
                        "name": "GetOpenBetsForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/close-events": {
            "post": {
                "description": "Close Events by EventIds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Close Events by EventIds",
                "parameters": [
                    {
                        "description": "CloseEventsReqDto model is used",
                        "name": "CloseEvents",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CloseEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/get-bet": {
            "post": {
                "description": "Get Bet Details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Bet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetBetReqDto model is used",
                        "name": "GetBet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetBetReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.GetBetRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.GetBetRespDto"
                        }
                    }
                }
            }
        },
        "/portal/get-operators": {
            "post": {
                "description": "Get All Operators",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Portal Get All Operators",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOperatorsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOperatorsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/list-events": {
            "post": {
                "description": "List All Events by Sport by provider of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "List All Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetEventsReqDto model is used",
                        "name": "ListSports",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/list-sports": {
            "post": {
                "description": "List All Sports by provider of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "List All Sports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetSportsReqDto model is used",
                        "name": "ListSports",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetSportsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/list-users": {
            "post": {
                "description": "List All Users of an operator. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "List All Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetUsersReqDto model is used",
                        "name": "ListUsers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsersReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersRespDto"
                        }
                    }
                }
            }
        },
        "/portal/login": {
            "post": {
                "description": "Login into an administration portal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin",
                    "Portal-PlatformAdmin"
                ],
                "summary": "Portal Login",
                "parameters": [
                    {
                        "description": "PortalLoginReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PortalLoginReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PortalLoginRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.PortalLoginRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/block-compititions": {
            "post": {
                "description": "Block Competitions of an SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BlockedCompReqDto model is used",
                        "name": "BlockCompetitionForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompResqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompResqDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/block-event": {
            "post": {
                "description": "Block Events of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BlockedEventReqDto model is used",
                        "name": "BlockEventForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventReqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventReqDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/block-market": {
            "post": {
                "description": "Blocking a Market by Operator Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Blocking a Market by Operator Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "BlockMarketForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/block-sport": {
            "post": {
                "description": "Block Sports For OP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Sports For OP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BlockedSportReqDto model is used",
                        "name": "BlockSportsForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedSportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedSportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedSportRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/compititions": {
            "post": {
                "description": "List All Competitions of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CompReqDto model is used",
                        "name": "GetCompetitionsListForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/events": {
            "post": {
                "description": "List All Competitions of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetEventsReqDto model is used",
                        "name": "GetEventsListForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/get-bets": {
            "post": {
                "description": "List All Bets of OPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Bets for OP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsHistoryReqDto model is used",
                        "name": "GetBetsForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/get-markets": {
            "post": {
                "description": "Get all Markets for an event by Operator Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "GetMarkets by Operator Admin",
                "parameters": [
                    {
                        "description": "GetMarketsReqDto model is used",
                        "name": "GetMarketsForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMarketStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMarketStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/recent-compititions": {
            "post": {
                "description": "List All Recent Competitions of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Recent Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CompReqDto model is used",
                        "name": "GetCompetitionsListForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/sports": {
            "post": {
                "description": "List All Sports of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Sports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "SportsReqDto model is used",
                        "name": "GetSportsListForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SportsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SportsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.SportsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/unblock-compititions": {
            "post": {
                "description": "Unblock Competitions of an OP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Unblock Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UnblockedCompResqDto model is used",
                        "name": "UnblockCompetitionForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompResqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompReqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompReqDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/unblock-event": {
            "post": {
                "description": "Block Events of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetEventsReqDto model is used",
                        "name": "BlockEventForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/unblock-market": {
            "post": {
                "description": "Unblocking a Market by Operator Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Unblocking a Market by Operator Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "UnblockMarketForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/opadmin/unblock-sport": {
            "post": {
                "description": "Unblock Sport For OP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Unblock Sport For OP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UnblockedSportReqDto model is used",
                        "name": "UnblockSportsForOP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedSportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedSportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedSportRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/add-partner": {
            "post": {
                "description": "Adding a partner to an operator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Operator Partner",
                "parameters": [
                    {
                        "description": "AddPartnerReqDto model is used",
                        "name": "add-partner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddPartnerReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/block-competition": {
            "post": {
                "description": "Block Competitions of an SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BlockedCompReqDto model is used",
                        "name": "BlockCompetitionForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompResqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedCompResqDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/block-event": {
            "post": {
                "description": "Block Events of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Block Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BlockedEventReqDto model is used",
                        "name": "BlockEventForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventResqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockedEventResqDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/block-market": {
            "post": {
                "description": "Blocking a Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Blocking a Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "BlockMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/block-op-market": {
            "post": {
                "description": "Blocking an Operator Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Blocking an Operator Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateOpMarketsReqDto model is used",
                        "name": "BlockOPMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOpMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/competition-operator-status": {
            "post": {
                "description": "Update Status of Operator with respect to Competition in SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Update Status of Operator with respect to Competition in SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OperStatusInCompetitionReqDto model is used",
                        "name": "OperatorStatusInCompetitionForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusInCompetitionReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/compititions": {
            "post": {
                "description": "List All Competitions of an SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CompReqDto model is used",
                        "name": "GetCompetitionsListForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/event-operator-status": {
            "post": {
                "description": "Update Status of Operator with respect to Event in SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Update Status of Operator with respect to Event in SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OperStatusInEventReqDto model is used",
                        "name": "OperatorStatusInEventForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusInEventReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/events": {
            "post": {
                "description": "List All Events of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetEventsReqDto model is used",
                        "name": "GetEventsListForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetEventsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-bets": {
            "post": {
                "description": "List All Bets of SAPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Bets for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsHistoryReqDto model is used",
                        "name": "GetBetsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-cancelled-bets": {
            "post": {
                "description": "List Lapsed Bets of SAPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Lapsed Bets for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsHistoryReqDto model is used",
                        "name": "GetCancelledBetsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-lapsed-bets": {
            "post": {
                "description": "List Lapsed Bets of SAPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Lapsed Bets for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsHistoryReqDto model is used",
                        "name": "GetLapsedBetsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-markets": {
            "post": {
                "description": "Get all Markets for an event by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "GetMarkets by Platform Admin",
                "parameters": [
                    {
                        "description": "GetMarketsReqDto model is used",
                        "name": "GetMarketsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetMarketsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Sp_dto_portal.GetMarketsRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-op-markets": {
            "post": {
                "description": "Get all Markets for a market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "GetMarkets by Platform Admin",
                "parameters": [
                    {
                        "description": "GetOpMarketsReqDto model is used",
                        "name": "GetOpMarketsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetOpMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMarketStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMarketStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/get-settled-bets": {
            "post": {
                "description": "List Settled Bets of SAPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Settled Bets for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetsHistoryReqDto model is used",
                        "name": "GetSettledBetsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.BetsHistoryRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/list-users": {
            "post": {
                "description": "List All Users of an SAPAdmin. Pagination is present. A maximum of 50 Users in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "List All Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetUsersReqDto model is used",
                        "name": "GetUsersForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsersReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/operator-details": {
            "post": {
                "description": "List Operator of specific Tab for SAP. Pagination is present.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Operator Details form the status tables for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GetOperDetailReqDto model is used",
                        "name": "OperatorDetailsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.GetOperDetailReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetOperDetailRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.GetOperDetailRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/operator-status-unblock": {
            "post": {
                "description": "Get Operator Status  Block form the status tables for SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Operator Status  Block form the status tables for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OperStatusUnblockReqDto model is used",
                        "name": "OperatorStatusUnblockForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusUnblockReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusUnblockRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusUnblockRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/provider-operator-status": {
            "post": {
                "description": "Update Status of Operator with respect to providers in SAP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Update Status of Operator with respect to providers in SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OperStatusInProviderReqDto model is used",
                        "name": "OperatorStatusInProviderForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusInProviderReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/recent-compititions": {
            "post": {
                "description": "List All Recent Competitions of an SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get Recent Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CompReqDto model is used",
                        "name": "GetCompetitionsListForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CompRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/resume-market": {
            "post": {
                "description": "Resuming a Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Resuming a Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "ResumeMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/sport-operator-status": {
            "post": {
                "description": "Update Status of Operator with respect to Sport in SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Update Status of Operator with respect to Sport in SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "OperStatusInSportReqDto model is used",
                        "name": "OperatorStatusInSportForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusInSportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/commondto.OperStatusRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/suspend-market": {
            "post": {
                "description": "Suspending a Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Suspending a Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "SuspendMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/unblock-competition": {
            "post": {
                "description": "Unblock Competitions of an SAP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Unblock Competitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UnblockedCompReqDto model is used",
                        "name": "UnblockCompetitionForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompResqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedCompResqDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/unblock-event": {
            "post": {
                "description": "Unblock Events of an operator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Unblock Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UnblockedEventReqDto model is used",
                        "name": "UnblockEventForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedEventReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedEventResqDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UnblockedEventResqDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/unblock-market": {
            "post": {
                "description": "Unblocking a Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Unblocking a Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateMarketsReqDto model is used",
                        "name": "UnblockMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/unblock-op-market": {
            "post": {
                "description": "Unblocking an Operator Market by Platform Admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Unblocking an Operator Market by Platform Admin",
                "parameters": [
                    {
                        "description": "UpdateOpMarketsReqDto model is used",
                        "name": "UnblockOPMarketForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOpMarketsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/portal/sapadmin/user-statement": {
            "post": {
                "description": "List Transactions of All user for SAP. Pagination is present. A maximum of 50 Transactions in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get All User Statement for SAP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "UserStatementForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/portal/user-statement": {
            "post": {
                "description": "List Transactions of a user. Pagination is present. A maximum of 50 Transactions in a single request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-OperatorAdmin"
                ],
                "summary": "Get User Statement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "UserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.UserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-admin-statement": {
            "post": {
                "description": "Admin Statement API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Admin Statement API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "AdminStatementReqDto model is used",
                        "name": "AdminStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.AdminStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.AdminStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.AdminStatementRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-bet-detail-report": {
            "post": {
                "description": "Get Bet Details Report Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Bet Details Report Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetDetailReportReqDto model is used",
                        "name": "BetDetailReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.BetDetailReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.BetDetailReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.BetDetailReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-bet-list": {
            "post": {
                "description": "Bet List Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Bet List Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "BetListReqDto model is used",
                        "name": "BetList",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.BetListReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.BetListRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.BetListRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-competition-pnl-report": {
            "post": {
                "description": "Event Pnl Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Event Pnl Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "EventPnLReportReqDto model is used",
                        "name": "EventPnLReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.EventPnLReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.EventPnLReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.EventPnLReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-game-report": {
            "post": {
                "description": "My Game Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "My Game Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "GameReportReqDto model is used",
                        "name": "GameReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.GameReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.GameReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.GameReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-my-account-statement": {
            "post": {
                "description": "My Account Statement API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "My Account Statement API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "MyAccStatementReqDto model is used",
                        "name": "MyAccountStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.MyAccStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.MyAccStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.MyAccStatementRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-operator-risk-report": {
            "post": {
                "description": "Get Market Risk Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Market Risk Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "RiskReportReqDto model is used",
                        "name": "GetMarketRiskReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.RiskReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.RiskReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.RiskReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-pnl-report": {
            "post": {
                "description": "Profit and Loss Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Profit and Loss Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "PnLReportReqDto model is used",
                        "name": "GameReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.PnLReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.PnLReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.PnLReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-provider-pnl-report": {
            "post": {
                "description": "Provider Pnl Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Provider Pnl Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "ProviderPnLReportReqDto model is used",
                        "name": "ProviderPnLReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.ProviderPnLReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.ProviderPnLReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.ProviderPnLReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-sport-pnl-report": {
            "post": {
                "description": "Sports Pnl Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Sports Pnl Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "SportPnLReportReqDto model is used",
                        "name": "SportPnLReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.SportPnLReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.SportPnLReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.SportPnLReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-transfer-user-statement": {
            "post": {
                "description": "Get Transfer User Statement API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Transfer User Statement API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "TransferUserStatementReqDto model is used",
                        "name": "TransferUserStatement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.TransferUserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-user-audit-report": {
            "post": {
                "description": "Get User Audit Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get User Audit Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserAuditReportReqDto model is used",
                        "name": "GetUserAuditReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.UserAuditReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.UserAuditReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.UserAuditReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-user-book-report": {
            "post": {
                "description": "Get User Book Report API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get User Book Report API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserBookReportReqDto model is used",
                        "name": "GetUserBookReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.UserBookReportReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.UserBookReportRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.UserBookReportRespDto"
                        }
                    }
                }
            }
        },
        "/reports/get-user-statement": {
            "post": {
                "description": "User Statement API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "User Statement API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UserStatementReqDto model is used",
                        "name": "Statement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.UserStatementReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.UserStatementRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/reports.UserStatementRespDto"
                        }
                    }
                }
            }
        },
        "/sapadmin/get-new-sports": {
            "post": {
                "description": "To add new sports to SAP Platform from a given provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "To Get New Sports from Provider",
                "parameters": [
                    {
                        "description": "SyncSportsReqDto model is used",
                        "name": "GetNewSports",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commondto.SyncSportsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.CommonPortalRespDto"
                        }
                    }
                }
            }
        },
        "/sapadmin/get-open-bets": {
            "post": {
                "description": "Get Open Bets For SAP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portal-PlatformAdmin"
                ],
                "summary": "Get Open Bets For SAP",
                "parameters": [
                    {
                        "description": "OpenBetsReqDto model is used",
                        "name": "GetOpenBetsForSAP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.OpenBetsRespDto"
                        }
                    }
                }
            }
        },
        "/test/pagination-report": {
            "post": {
                "description": "bring bets data from database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test-Service"
                ],
                "summary": "PaginationReport is a function to bring data from database",
                "parameters": [
                    {
                        "description": "BetsReportReq model is used",
                        "name": "PaginationReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.BetsReportReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetReportResp"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/responsedto.BetReportResp"
                        }
                    }
                }
            }
        },
        "/wallet/deposit-funds": {
            "post": {
                "description": "To add funds to user balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet-Service"
                ],
                "summary": "User Deposit Funds API",
                "parameters": [
                    {
                        "description": "DepositReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.DepositReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.DepositRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.DepositRespDto"
                        }
                    }
                }
            }
        },
        "/wallet/user-balance": {
            "post": {
                "description": "To get current user balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet-Service"
                ],
                "summary": "User Balance API",
                "parameters": [
                    {
                        "description": "UserBalanceReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.UserBalanceReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.UserBalanceRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.UserBalanceRespDto"
                        }
                    }
                }
            }
        },
        "/wallet/withdraw-funds": {
            "post": {
                "description": "To withdraw funds from user balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet-Service"
                ],
                "summary": "User Withdraw Funds API",
                "parameters": [
                    {
                        "description": "WithdrawReqDto model is used",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operatordto.WithdrawReqDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operatordto.WithdrawRespDto"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/operatordto.WithdrawRespDto"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Sp_dto_core.GetEventsReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_core.GetEventsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "sports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EventDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_core.GetMarketsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_core.GetMarketsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "event": {
                    "$ref": "#/definitions/dto.EventDto"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_portal.GetEventsReqDto": {
            "type": "object",
            "properties": {
                "EventId": {
                    "type": "string"
                },
                "competitionId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_portal.GetEventsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Event"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_portal.GetMarketsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "Sp_dto_portal.GetMarketsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "markets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Market"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.ConfigDto": {
            "type": "object",
            "properties": {
                "bookmaker": {
                    "$ref": "#/definitions/commondto.Features"
                },
                "fancy": {
                    "$ref": "#/definitions/commondto.Features"
                },
                "hold": {
                    "type": "number"
                },
                "isSet": {
                    "type": "boolean"
                },
                "matchOdds": {
                    "$ref": "#/definitions/commondto.Features"
                }
            }
        },
        "commondto.Features": {
            "type": "object",
            "properties": {
                "delay": {
                    "type": "number"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "oddLimits": {
                    "type": "integer"
                }
            }
        },
        "commondto.GetOperDetailReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "commondto.GetOperDetailRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/commondto.OperatorStatus"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.GetSportsReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "description": "optional for portal users",
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "description": "mandatory.",
                    "type": "string"
                },
                "token": {
                    "description": "optional for portal users",
                    "type": "string"
                }
            }
        },
        "commondto.GetSportsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "sports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/commondto.SportDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusInCompetitionReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusInEventReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusInProviderReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusInSportReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusUnblockReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "commondto.OperStatusUnblockRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "commondto.OperatorStatus": {
            "type": "object",
            "properties": {
                "OperatorId": {
                    "type": "string"
                },
                "isActive": {
                    "type": "string"
                },
                "operatorName": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                }
            }
        },
        "commondto.SportDto": {
            "type": "object",
            "properties": {
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                }
            }
        },
        "commondto.SyncSportsReqDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                }
            }
        },
        "dto.AddPartnerReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partner": {
                    "$ref": "#/definitions/operatordto.Partner"
                }
            }
        },
        "dto.AllMarketsDto": {
            "type": "object",
            "properties": {
                "bookmakers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MatchOddsDto"
                    }
                },
                "fancyMarkets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FancyMarketDto"
                    }
                },
                "matchOdds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MatchOddsDto"
                    }
                }
            }
        },
        "dto.AuthReqDto": {
            "type": "object",
            "properties": {
                "clientIp": {
                    "type": "string"
                },
                "currency": {
                    "description": "can be ENUM",
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "platformId": {
                    "description": "can be ENUM",
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AuthRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProviderDto"
                    }
                },
                "status": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedCompReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedCompResqDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedEventReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedEventResqDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedSportReqDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.BlockedSportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CloseEventsReqDto": {
            "type": "object",
            "properties": {
                "eventIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.CommonPortalRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CompReqDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.CompRespDto": {
            "type": "object",
            "properties": {
                "Competition": {
                    "description": "TODO: Add competitions DTO once it is created",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Competition"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.Competition": {
            "type": "object",
            "properties": {
                "CompetitionId": {
                    "type": "string"
                },
                "CompetitionName": {
                    "type": "string"
                },
                "status": {
                    "description": "active / blocked / deleted",
                    "type": "string"
                }
            }
        },
        "dto.Event": {
            "type": "object",
            "properties": {
                "Status": {
                    "type": "string"
                },
                "competitionId": {
                    "type": "string"
                },
                "competitionName": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "favourite": {
                    "type": "boolean"
                },
                "openDate": {
                    "description": "Unix milliseconds",
                    "type": "integer"
                },
                "providerId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                },
                "sportsId": {
                    "type": "string"
                }
            }
        },
        "dto.EventDto": {
            "type": "object",
            "properties": {
                "awayScore": {
                    "type": "number"
                },
                "competitionId": {
                    "type": "string"
                },
                "competitionName": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "homeScore": {
                    "type": "number"
                },
                "marketId": {
                    "type": "string"
                },
                "markets": {
                    "$ref": "#/definitions/dto.AllMarketsDto"
                },
                "openDate": {
                    "type": "integer"
                },
                "providerName": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.FancyMarketDto": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "limits": {
                    "$ref": "#/definitions/dto.LimitsDto"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "noRate": {
                    "type": "number"
                },
                "noValue": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "yesRate": {
                    "type": "number"
                },
                "yesValue": {
                    "type": "number"
                }
            }
        },
        "dto.GetBetReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "description": "mandatory",
                    "type": "string"
                },
                "transactionId": {
                    "description": "mandatory",
                    "type": "string"
                }
            }
        },
        "dto.GetLiveEventsReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.GetLiveEventsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "sports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EventDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.GetMarketStatusRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "marketStatus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MarketStatus"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.GetOpMarketsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.GetOperatorsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Operator"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.GetUsersReqDto": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "optional. Empty value will bring latest results sort by date descending.",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "optional. Empty value will bring 50 records. Value can't be more than 50.",
                    "type": "integer"
                },
                "partialUserName": {
                    "description": "optional.",
                    "type": "string"
                }
            }
        },
        "dto.LimitsDto": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "maxBetValue": {
                    "type": "number"
                },
                "minBetValue": {
                    "type": "number"
                },
                "oddsLimit": {
                    "type": "number"
                }
            }
        },
        "dto.ListUsersRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserDto"
                    }
                }
            }
        },
        "dto.MatchOddsDto": {
            "type": "object",
            "properties": {
                "limits": {
                    "$ref": "#/definitions/dto.LimitsDto"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "runners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RunnerDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.OpenBetDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "betTime": {
                    "type": "integer"
                },
                "betType": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "isUnmatched": {
                    "type": "boolean"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "oddValue": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "type": "number"
                },
                "sportId": {
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.OpenBetsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.OpenBetsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "openBets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OpenBetDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.Operator": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "base_url": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/commondto.ConfigDto"
                },
                "currency": {
                    "type": "string"
                },
                "operatorKey": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "operator_name": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                },
                "status": {
                    "description": "ACTIVE / BLOCKED",
                    "type": "string"
                },
                "wallet_type": {
                    "description": "Seamless / Transfer / Feed",
                    "type": "string"
                }
            }
        },
        "dto.PortalLoginReqDto": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.PortalLoginRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.PriceDto": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            }
        },
        "dto.ProviderDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                },
                "providerName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.RunnerDto": {
            "type": "object",
            "properties": {
                "backPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceDto"
                    }
                },
                "layPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceDto"
                    }
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.Sport": {
            "type": "object",
            "properties": {
                "SportId": {
                    "type": "string"
                },
                "SportName": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "status": {
                    "description": "active / blocked / deleted",
                    "type": "string"
                }
            }
        },
        "dto.SportsReqDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                }
            }
        },
        "dto.SportsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "sports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Sport"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedCompReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedCompResqDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedEventReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedEventResqDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedSportReqDto": {
            "type": "object",
            "properties": {
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.UnblockedSportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateMarketsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateOpMarketsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "dto.UserDto": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "dto.UserStatementReqDto": {
            "type": "object",
            "properties": {
                "endDate": {
                    "description": "optional. Date in unix format.",
                    "type": "integer"
                },
                "operatorId": {
                    "description": "mandatory",
                    "type": "string"
                },
                "page": {
                    "description": "optional. Empty value will bring latest results sort by date descending.",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "optional. Empty value will bring 50 records. Value can't be more than 50.",
                    "type": "integer"
                },
                "startDate": {
                    "description": "optional. Date in unix format.",
                    "type": "integer"
                },
                "transactionType": {
                    "description": "optional. Valid values are FUNDS / BETS",
                    "type": "string"
                },
                "userId": {
                    "description": "mandatory",
                    "type": "string"
                }
            }
        },
        "dto.UserStatementRespDto": {
            "type": "object",
            "properties": {
                "Transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserTransaction"
                    }
                },
                "balance": {
                    "type": "number"
                },
                "errorDescription": {
                    "type": "string"
                },
                "page": {
                    "description": "Current Page number",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "Bets count in Bets Array",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "totalRecords": {
                    "description": "Total bet count which matched the filtered query",
                    "type": "integer"
                }
            }
        },
        "dto.UserTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "+ve value added to user, -ve values deducted from user",
                    "type": "number"
                },
                "competitionName": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "referenceId": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "transactionTime": {
                    "description": "unix time in milliseconds",
                    "type": "integer"
                },
                "transactionType": {
                    "type": "string"
                }
            }
        },
        "models.Market": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "applicable for Fancy Markets",
                    "type": "string"
                },
                "competitionId": {
                    "description": "IPL, BBL",
                    "type": "string"
                },
                "competitionName": {
                    "description": "IPL, BBL",
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/commondto.ConfigDto"
                },
                "createdAt": {
                    "description": "DateTime in Unix seconds",
                    "type": "integer"
                },
                "eventId": {
                    "description": "Unique event id",
                    "type": "string"
                },
                "eventKey": {
                    "description": "ProviderId+\"-\"+SportId+\"-\"+EventId+\"-\"",
                    "type": "string"
                },
                "eventName": {
                    "description": "IPL / BBL / IC T20 WC",
                    "type": "string"
                },
                "favourite": {
                    "description": "False - non-favourite. Default is False",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isSuspended": {
                    "description": "to SUSPEND / RESUME markets.",
                    "type": "boolean"
                },
                "marketId": {
                    "description": "Unique Id of the market",
                    "type": "string"
                },
                "marketKey": {
                    "description": "ProviderId+\"-\"+SportId+\"-\"+EventId+\"-\"+MarketId",
                    "type": "string"
                },
                "marketName": {
                    "description": "Name of Market",
                    "type": "string"
                },
                "marketStatus": {
                    "description": "OPEN / MAPPED / INPROGRESS / SETTLED / VOIDED / CANCELLED / SUSPENDED",
                    "type": "string"
                },
                "marketType": {
                    "description": "Market Type",
                    "type": "string"
                },
                "providerId": {
                    "description": "Dream / BetFair / SportRadar",
                    "type": "string"
                },
                "providerName": {
                    "description": "Dream Sports / Bet Fair / Sport Radar",
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Result"
                    }
                },
                "rollbacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Rollback"
                    }
                },
                "runners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Runner"
                    }
                },
                "sportId": {
                    "description": "1 / 2 / 4",
                    "type": "string"
                },
                "sportName": {
                    "description": "Soccer / Tennis / Cricket",
                    "type": "string"
                },
                "status": {
                    "description": "ACTIVE / BLOCKED",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "DateTime in Unix seconds",
                    "type": "integer"
                }
            }
        },
        "models.MarketStatus": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "competitionName": {
                    "description": "IPL / BBL / ICC T20 WC",
                    "type": "string"
                },
                "config": {
                    "description": "Configuration for the event",
                    "$ref": "#/definitions/commondto.ConfigDto"
                },
                "createdAt": {
                    "description": "DateTime in Unix seconds",
                    "type": "integer"
                },
                "eventId": {
                    "type": "string"
                },
                "eventKey": {
                    "description": "OperatorId+\"-\"+ProviderId+\"-\"+SportId+\"-\"+EventId",
                    "type": "string"
                },
                "eventName": {
                    "description": "IPL / BBL / ICC T20 WC",
                    "type": "string"
                },
                "favourite": {
                    "description": "False - non-favourite. Default is False",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isCommission": {
                    "description": "Default false, NO commission",
                    "type": "boolean"
                },
                "marketId": {
                    "description": "Unique Id of the market",
                    "type": "string"
                },
                "marketKey": {
                    "description": "OperatorId+\"-\"+ProviderId+\"-\"+SportId+\"-\"+EventId+\"-\"+MarketId",
                    "type": "string"
                },
                "marketName": {
                    "description": "Name of Market",
                    "type": "string"
                },
                "marketType": {
                    "description": "Market Type",
                    "type": "string"
                },
                "operatorId": {
                    "description": "Operator Id for that operator",
                    "type": "string"
                },
                "operatorName": {
                    "description": "Operator Name for that operator",
                    "type": "string"
                },
                "operatorStatus": {
                    "description": "Operator swatich to block for themselve, Default BLOCKED",
                    "type": "string"
                },
                "providerId": {
                    "description": "Dream / BetFair / SportRadar",
                    "type": "string"
                },
                "providerName": {
                    "description": "Dream Sports / Bet Fair / Sport Radar",
                    "type": "string"
                },
                "providerStatus": {
                    "description": "Provider swtich to block to a particular operator, Default BLOCKED",
                    "type": "string"
                },
                "sportId": {
                    "description": "1 / 2 / 4",
                    "type": "string"
                },
                "sportName": {
                    "description": "Soccer / Tennis / Cricket",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "DateTime in Unix Seconds",
                    "type": "integer"
                },
                "winCommission": {
                    "description": "if enabled, default (minimum) is 2%",
                    "type": "number"
                }
            }
        },
        "models.Result": {
            "type": "object",
            "properties": {
                "resultTime": {
                    "type": "integer"
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "fancy scrore ex: 45 NO, 46 YES",
                    "type": "number"
                }
            }
        },
        "models.Rollback": {
            "type": "object",
            "properties": {
                "rollbackReason": {
                    "type": "string"
                },
                "rollbackTime": {
                    "type": "integer"
                },
                "rollbackType": {
                    "type": "string"
                }
            }
        },
        "models.Runner": {
            "type": "object",
            "properties": {
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "runnerStatus": {
                    "type": "string"
                }
            }
        },
        "operatordto.BetHistory": {
            "type": "object",
            "properties": {
                "betAmount": {
                    "description": "Debit Amount",
                    "type": "number"
                },
                "betId": {
                    "description": "Unique Bet Id",
                    "type": "string"
                },
                "betReq": {
                    "description": "Bet Request information. Refer inner details",
                    "$ref": "#/definitions/operatordto.BetReq"
                },
                "betResults": {
                    "description": "Array of Bet Results information. Refer inner details",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/operatordto.BetResult"
                    }
                },
                "betRollbacks": {
                    "description": "Array of Bet Rollback information. Refer inner details",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/operatordto.BetRollback"
                    }
                },
                "betTime": {
                    "description": "Bet Placement Time",
                    "type": "integer"
                },
                "competitionName": {
                    "description": "Competition / League name to display",
                    "type": "string"
                },
                "eventId": {
                    "description": "Event Id",
                    "type": "string"
                },
                "eventName": {
                    "description": "Event / Match name to display",
                    "type": "string"
                },
                "marketName": {
                    "description": "Market Name to display",
                    "type": "string"
                },
                "marketType": {
                    "description": "Market Type",
                    "type": "string"
                },
                "providerName": {
                    "description": "Sports provider name to display",
                    "type": "string"
                },
                "sportName": {
                    "description": "Sport Name to display",
                    "type": "string"
                },
                "status": {
                    "description": "Bet status. Open / Settled / Void",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Last update time in unix format",
                    "type": "integer"
                },
                "userId": {
                    "description": "Unique to Operator",
                    "type": "string"
                },
                "userIp": {
                    "description": "User's device IP",
                    "type": "string"
                },
                "userName": {
                    "description": "User's Friendly name to display",
                    "type": "string"
                },
                "wonAmount": {
                    "description": "CreditAmount + RollbackAmount - DebitAmount. A positive number is a user win.",
                    "type": "number"
                }
            }
        },
        "operatordto.BetReq": {
            "type": "object",
            "properties": {
                "betOdds": {
                    "description": "Odd value. Ex: 1.86",
                    "type": "number"
                },
                "betStake": {
                    "description": "Bet Stake amount entered in the bet slip",
                    "type": "number"
                },
                "betTime": {
                    "description": "Bet Placement Time",
                    "type": "integer"
                },
                "betType": {
                    "description": "BACK or LAY bet",
                    "type": "string"
                },
                "runnerName": {
                    "description": "Expected outcome for MATCH_ODDS and BOOKMAKER markets, Market Name for FANCY markets",
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "Expected outcome for FANCY",
                    "type": "number"
                },
                "unifiedOdds": {
                    "description": "MatchOdds style odds",
                    "type": "number"
                }
            }
        },
        "operatordto.BetResult": {
            "type": "object",
            "properties": {
                "resultTime": {
                    "description": "Result announced time",
                    "type": "integer"
                },
                "runnerName": {
                    "description": "Actual outcome for MATCH_ODDS and BOOKMAKER markets, Market Name for FANCY markets",
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "Actual outcome for FANCY",
                    "type": "number"
                },
                "winAmount": {
                    "description": "User win amount",
                    "type": "number"
                }
            }
        },
        "operatordto.BetRollback": {
            "type": "object",
            "properties": {
                "rollbackAmount": {
                    "description": "Roolback amount. +ve value to add to user balance, -ve value to deduct from user balance",
                    "type": "number"
                },
                "rollbackReason": {
                    "description": "Rollback Reason",
                    "type": "string"
                },
                "rollbackTime": {
                    "description": "Rollback anounced time",
                    "type": "integer"
                }
            }
        },
        "operatordto.BetsHistoryReqDto": {
            "type": "object",
            "properties": {
                "endDate": {
                    "description": "optional. Date in unix format.",
                    "type": "integer"
                },
                "eventId": {
                    "description": "optional. Empty value to get bets across all sports",
                    "type": "string"
                },
                "filterBy": {
                    "description": "optional. Posible values are 'CreatedAt' and 'UpdatedAt'. Default is 'CreatedAt'",
                    "type": "string"
                },
                "operatorId": {
                    "description": "Mandatory.",
                    "type": "string"
                },
                "page": {
                    "description": "optional. Empty value will bring latest results sort by date descending.",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "optional. Empty value will bring 50 records. Value can't be more than 50.",
                    "type": "integer"
                },
                "providerId": {
                    "description": "optional. Empty value to get bets across all providers",
                    "type": "string"
                },
                "sportId": {
                    "description": "optional. Empty value to get bets across all sports",
                    "type": "string"
                },
                "startDate": {
                    "description": "optional. Date in unix format.",
                    "type": "integer"
                },
                "status": {
                    "description": "optional. Empty value to get all. // OPEN / SETTLED / VOID / UNMATCHED / CANCEL / DELETED",
                    "type": "string"
                },
                "transactionIds": {
                    "description": "optional. Empty value to get bets across all sports",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userId": {
                    "description": "optional. Empty value to get all user bets",
                    "type": "string"
                }
            }
        },
        "operatordto.BetsHistoryRespDto": {
            "type": "object",
            "properties": {
                "bets": {
                    "description": "Array of Bets based on filtered query",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/operatordto.BetHistory"
                    }
                },
                "errorDescription": {
                    "description": "Failure reason",
                    "type": "string"
                },
                "page": {
                    "description": "Current Page number",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "Bets count in Bets Array",
                    "type": "integer"
                },
                "status": {
                    "description": "Request Status. \"RS_OK\" for Success, \"RS_ERROR\" for Failure",
                    "type": "string"
                },
                "totalRecords": {
                    "description": "Total bet count which matched the filtered query",
                    "type": "integer"
                }
            }
        },
        "operatordto.DepositReqDto": {
            "type": "object",
            "properties": {
                "creditAmount": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "operatordto.DepositRespDto": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "operatordto.GetBetRespDto": {
            "type": "object",
            "properties": {
                "betDetails": {
                    "description": "Bet Details",
                    "$ref": "#/definitions/operatordto.BetHistory"
                },
                "errorDescription": {
                    "description": "Failure reason",
                    "type": "string"
                },
                "status": {
                    "description": "Request Status. \"RS_OK\" for Success, \"RS_ERROR\" for Failure",
                    "type": "string"
                }
            }
        },
        "operatordto.Partner": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "currency": {
                    "description": "INR / HKD / USD",
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "rate": {
                    "type": "integer"
                },
                "status": {
                    "description": "ACTIVE / BLOCKED / SUSPENDED / DEACTIVATED",
                    "type": "string"
                }
            }
        },
        "operatordto.UserBalanceReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "operatordto.UserBalanceRespDto": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "operatordto.UserStatementReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "integer"
                },
                "operatorId": {
                    "type": "string"
                },
                "referenceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "operatordto.WithdrawReqDto": {
            "type": "object",
            "properties": {
                "debitAmount": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "operatordto.WithdrawRespDto": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.AdminStatement": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "from_to": {
                    "type": "string"
                },
                "my_share": {
                    "type": "number"
                },
                "points": {
                    "type": "number"
                },
                "settlement_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "reports.AdminStatementReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.AdminStatementRespDto": {
            "type": "object",
            "properties": {
                "adminStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.AdminStatement"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.BetDetailReportReqDto": {
            "type": "object",
            "properties": {
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "reports.BetDetailReportRespDto": {
            "type": "object",
            "properties": {
                "betReportDetail": {
                    "$ref": "#/definitions/reports.BetReportDetail"
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.BetList": {
            "type": "object",
            "properties": {
                "betTime": {
                    "type": "integer"
                },
                "betType": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "netAmount": {
                    "type": "number"
                },
                "odds": {
                    "type": "number"
                },
                "operatorAmount": {
                    "type": "number"
                },
                "operatorHold": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "rate": {
                    "type": "integer"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "type": "number"
                },
                "sportName": {
                    "type": "string"
                },
                "stake": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "reports.BetListReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                },
                "startTime": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.BetListRespDto": {
            "type": "object",
            "properties": {
                "betList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.BetList"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.BetReportDetail": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "betStatus": {
                    "type": "string"
                },
                "betType": {
                    "type": "string"
                },
                "lapsedAmount": {
                    "type": "number"
                },
                "lapsedTime": {
                    "type": "integer"
                },
                "marketResult": {
                    "$ref": "#/definitions/models.Result"
                },
                "odds": {
                    "type": "number"
                },
                "resultTime": {
                    "type": "integer"
                }
            }
        },
        "reports.CompetitionPnLReport": {
            "type": "object",
            "properties": {
                "betCount": {
                    "type": "integer"
                },
                "competitionId": {
                    "type": "string"
                },
                "competitionName": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "profitLoss": {
                    "type": "number"
                }
            }
        },
        "reports.CompetitionPnLReportReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "endTime": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.CompetitionPnLReportRespDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "competitionPnLReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.CompetitionPnLReport"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.EventPnLReport": {
            "type": "object",
            "properties": {
                "betCount": {
                    "type": "integer"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "profitLoss": {
                    "type": "number"
                }
            }
        },
        "reports.EventPnLReportReqDto": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "type": "string"
                },
                "endTime": {
                    "type": "number"
                },
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.EventPnLReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "sportPnLReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.EventPnLReport"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.GameReport": {
            "type": "object",
            "properties": {
                "bet_count": {
                    "type": "integer"
                },
                "game_name": {
                    "type": "string"
                },
                "lose_count": {
                    "type": "integer"
                },
                "void_count": {
                    "type": "integer"
                },
                "win_amount": {
                    "type": "number"
                },
                "win_count": {
                    "type": "integer"
                }
            }
        },
        "reports.GameReportReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "provider_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.GameReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "gameReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.GameReport"
                    }
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.Market": {
            "type": "object",
            "properties": {
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "risk_report": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Runner"
                    }
                }
            }
        },
        "reports.MyAccStatement": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "from_to": {
                    "type": "string"
                },
                "my_share": {
                    "type": "number"
                },
                "points": {
                    "type": "number"
                },
                "settlement_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "reports.MyAccStatementReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.MyAccStatementRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "myAccStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.MyAccStatement"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.PnLReport": {
            "type": "object",
            "properties": {
                "market_type": {
                    "type": "string"
                },
                "profit_loss": {
                    "type": "number"
                },
                "sport_name": {
                    "type": "string"
                }
            }
        },
        "reports.PnLReportReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.PnLReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "pnLReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.PnLReport"
                    }
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.ProviderPnLReport": {
            "type": "object",
            "properties": {
                "betCount": {
                    "type": "integer"
                },
                "profitLoss": {
                    "type": "number"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                }
            }
        },
        "reports.ProviderPnLReportReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.ProviderPnLReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "providerPnLReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.ProviderPnLReport"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.RiskReportReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.RiskReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "markets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Market"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.Runner": {
            "type": "object",
            "properties": {
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "runnerRisk": {
                    "type": "number"
                }
            }
        },
        "reports.SeemlessStatement": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "creditAmount": {
                    "type": "number"
                },
                "debitAmount": {
                    "type": "number"
                },
                "referenceId": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "transactionTime": {
                    "type": "integer"
                },
                "transactionType": {
                    "type": "string"
                }
            }
        },
        "reports.SeemlessUserStatementRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userBalance": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "userStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.SeemlessStatement"
                    }
                }
            }
        },
        "reports.SportPnLReport": {
            "type": "object",
            "properties": {
                "betCount": {
                    "type": "integer"
                },
                "competitionId": {
                    "type": "string"
                },
                "competitionName": {
                    "type": "string"
                },
                "profitLoss": {
                    "type": "number"
                },
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                }
            }
        },
        "reports.SportPnLReportReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.SportPnLReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "sportPnLReport": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.SportPnLReport"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reports.Statement": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "creditAmount": {
                    "type": "number"
                },
                "debitAmount": {
                    "type": "number"
                },
                "referenceId": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "transactionTime": {
                    "type": "integer"
                },
                "transactionType": {
                    "type": "string"
                }
            }
        },
        "reports.TransferUserStatementReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "integer"
                },
                "referenceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "reports.TransferUserStatementRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userBalance": {
                    "type": "number"
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "userStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Statement"
                    }
                }
            }
        },
        "reports.UserAuditReport": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "payload": {},
                "time": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.UserAuditReportReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.UserAuditReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_audit_report": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.UserAuditReport"
                    }
                }
            }
        },
        "reports.UserBook": {
            "type": "object",
            "properties": {
                "risk_report": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.UserBookRunner"
                    }
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "reports.UserBookReportReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "reports.UserBookReportRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userBooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.UserBook"
                    }
                }
            }
        },
        "reports.UserBookRunner": {
            "type": "object",
            "properties": {
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "runnerRisk": {
                    "type": "number"
                }
            }
        },
        "reports.UserStatement": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "credit_amount": {
                    "type": "number"
                },
                "debit_amount": {
                    "type": "number"
                },
                "event_name": {
                    "type": "string"
                },
                "market_type": {
                    "type": "string"
                },
                "settlement_time": {
                    "type": "integer"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "reports.UserStatementReqDto": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "reports.UserStatementRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.UserStatement"
                    }
                }
            }
        },
        "request.CancelInstruction": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "sizeReduction": {
                    "type": "number"
                }
            }
        },
        "request.ListCancelOrdersReq": {
            "type": "object",
            "properties": {
                "customerRef": {
                    "type": "string"
                },
                "instructions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.CancelInstruction"
                    }
                },
                "marketId": {
                    "type": "string"
                }
            }
        },
        "request.ListClearedOrdersReq": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "betStatus": {
                    "type": "string"
                }
            }
        },
        "request.ListCurrentOrdersReq": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "customerOrderRefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fromRecord": {
                    "type": "integer"
                },
                "marketIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recordCount": {
                    "type": "integer"
                }
            }
        },
        "requestdto.AddMarket": {
            "type": "object",
            "properties": {
                "competitionId": {
                    "description": "IPL / BBL",
                    "type": "string"
                },
                "eventId": {
                    "description": "Unique Event Id",
                    "type": "string"
                },
                "marketId": {
                    "description": "Unique Market Id",
                    "type": "string"
                },
                "marketType": {
                    "description": "MATCH_ODDS / BOOKMAKER / FANCY",
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "description": "Dream / BetFair / SportRadar",
                    "type": "string"
                },
                "sportId": {
                    "description": "1 / 2 / 3",
                    "type": "string"
                }
            }
        },
        "requestdto.BetsReportReq": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                }
            }
        },
        "requestdto.BetsResultReqDto": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.BetsStatusReqDto": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.CancelBet": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "cancelSize": {
                    "description": "ZERO means, cancel everything",
                    "type": "number"
                }
            }
        },
        "requestdto.CancelBetReqDto": {
            "type": "object",
            "properties": {
                "cancelBets": {
                    "description": "BetIds     []string `json:\"betIds\"`",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requestdto.CancelBet"
                    }
                },
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "description": "DREAM/BET_FAIR/SPORTS_RADAR",
                    "type": "string"
                },
                "sportId": {
                    "description": "CRICKET/SOCCER/TENNIS",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "requestdto.DatabaseWriteReqDto": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "any message",
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.DefaultReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.GetAllBetsReqDto": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "integer"
                },
                "referenceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "requestdto.GetCacheReq": {
            "type": "object",
            "properties": {
                "cacheType": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "requestdto.GetLicenseStatusReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.GetMatchedBetsReqDto": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "requestdto.Market": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                }
            }
        },
        "requestdto.MarketsResultReqDto": {
            "type": "object",
            "properties": {
                "markets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requestdto.Market"
                    }
                },
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "requestdto.OpenBetsReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "description": "Optional for feed-service",
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "requestdto.PlaceBetReqDto": {
            "type": "object",
            "properties": {
                "betType": {
                    "description": "BACK/LAY",
                    "type": "string"
                },
                "competitionId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "isUnmatched": {
                    "description": "For BetFair. Default is false, means FILL_OR_KILL.",
                    "type": "boolean"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "description": "for soccer, match_odds or goal_markets, can be avoided",
                    "type": "string"
                },
                "marketType": {
                    "description": "MATCH_ODDS/BOOK_MAKER/GOAL_MARKETS/FANCY_MARKET/",
                    "type": "string"
                },
                "oddValue": {
                    "type": "number"
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "description": "DREAM/BET_FAIR/SPORTS_RADAR",
                    "type": "string"
                },
                "runnerId": {
                    "description": "?? what is for fancy",
                    "type": "string"
                },
                "runnerName": {
                    "description": "?? what is for fancy",
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "fancy scrore ex: 45 NO, 46 YES",
                    "type": "number"
                },
                "sportId": {
                    "description": "CRICKET/SOCCER/TENNIS",
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                },
                "token": {
                    "type": "string"
                },
                "userAgent": {
                    "description": "Mobile or Internet",
                    "type": "string"
                }
            }
        },
        "requestdto.ProvidersReqDto": {
            "type": "object",
            "properties": {
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                }
            }
        },
        "requestdto.SportRadarCancelBetReqDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                }
            }
        },
        "requestdto.UserBetStatusReqDto": {
            "type": "object",
            "properties": {
                "eventId": {
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "sportId": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "response.BFCancelOrdersResp": {
            "type": "object",
            "properties": {
                "cancelOrdersResp": {
                    "$ref": "#/definitions/response.CancelOrdersResp"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                },
                "status": {
                    "description": "RS_OK or RS_ERROR",
                    "type": "string"
                }
            }
        },
        "response.BFClearedOrdersResp": {
            "type": "object",
            "properties": {
                "clearedOrderResp": {
                    "$ref": "#/definitions/response.ClearedOrdersResp"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                },
                "status": {
                    "description": "RS_OK or RS_ERROR",
                    "type": "string"
                }
            }
        },
        "response.BFCurrentOrdersResp": {
            "type": "object",
            "properties": {
                "currentOrdersResp": {
                    "$ref": "#/definitions/response.CurrentOrdersResp"
                },
                "message": {
                    "description": "Error message",
                    "type": "string"
                },
                "status": {
                    "description": "RS_OK or RS_ERROR",
                    "type": "string"
                }
            }
        },
        "response.CancelInstruction": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "sizeReduction": {
                    "type": "number"
                }
            }
        },
        "response.CancelInstructionReport": {
            "type": "object",
            "properties": {
                "cancelledDate": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "string"
                },
                "instruction": {
                    "$ref": "#/definitions/response.CancelInstruction"
                },
                "sizeCancelled": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.CancelOrdersResp": {
            "type": "object",
            "properties": {
                "customerRef": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "string"
                },
                "instructionReports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.CancelInstructionReport"
                    }
                },
                "marketId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.ClearedOrder": {
            "type": "object",
            "properties": {
                "betCount": {
                    "type": "integer"
                },
                "betId": {
                    "type": "string"
                },
                "betOutcome": {
                    "type": "string"
                },
                "commission": {
                    "type": "number"
                },
                "customerOrderRef": {
                    "type": "string"
                },
                "customerStrategyRef": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventTypeId": {
                    "type": "string"
                },
                "handicap": {
                    "type": "number"
                },
                "itemDescription": {},
                "lastMatchedDate": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "orderType": {
                    "type": "string"
                },
                "persistenceType": {
                    "type": "string"
                },
                "placedDate": {
                    "type": "string"
                },
                "priceMatched": {
                    "type": "number"
                },
                "priceReduced": {
                    "type": "boolean"
                },
                "priceRequested": {
                    "type": "number"
                },
                "profit": {
                    "type": "number"
                },
                "selectionId": {
                    "type": "integer"
                },
                "settledDate": {
                    "type": "string"
                },
                "side": {
                    "type": "string"
                },
                "sizeCancelled": {
                    "type": "number"
                },
                "sizeSettled": {
                    "type": "number"
                }
            }
        },
        "response.ClearedOrdersResp": {
            "type": "object",
            "properties": {
                "clearedOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.ClearedOrder"
                    }
                },
                "moreAvailable": {
                    "type": "boolean"
                }
            }
        },
        "response.CurrentOrder": {
            "type": "object",
            "properties": {
                "averagePriceMatched": {
                    "type": "number"
                },
                "betId": {
                    "type": "string"
                },
                "bspLiability": {
                    "type": "number"
                },
                "customerOrderRef": {
                    "type": "string"
                },
                "customerStrategyRef": {
                    "type": "string"
                },
                "handicap": {
                    "type": "number"
                },
                "marketId": {
                    "type": "string"
                },
                "matchedDate": {
                    "type": "string"
                },
                "orderType": {
                    "type": "string"
                },
                "persistenceType": {
                    "type": "string"
                },
                "placedDate": {
                    "type": "string"
                },
                "priceSize": {
                    "type": "object",
                    "properties": {
                        "price": {
                            "type": "number"
                        },
                        "size": {
                            "type": "number"
                        }
                    }
                },
                "regulatorAuthCode": {
                    "type": "string"
                },
                "regulatorCode": {
                    "type": "string"
                },
                "selectionId": {
                    "type": "integer"
                },
                "side": {
                    "type": "string"
                },
                "sizeCancelled": {
                    "type": "number"
                },
                "sizeLapsed": {
                    "type": "number"
                },
                "sizeMatched": {
                    "type": "number"
                },
                "sizeRemaining": {
                    "type": "number"
                },
                "sizeVoided": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.CurrentOrdersResp": {
            "type": "object",
            "properties": {
                "currentOrders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.CurrentOrder"
                    }
                },
                "moreAvailable": {
                    "type": "boolean"
                }
            }
        },
        "responsedto.AllBetDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "betResult": {
                    "type": "string"
                },
                "betReturns": {
                    "type": "number"
                },
                "betStatus": {
                    "type": "string"
                },
                "betType": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "isUnmatched": {
                    "type": "boolean"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "oddValue": {
                    "type": "number"
                },
                "openEventDate": {
                    "type": "integer"
                },
                "requestTime": {
                    "type": "integer"
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "type": "number"
                },
                "sportId": {
                    "type": "string"
                },
                "sportName": {
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                }
            }
        },
        "responsedto.BetReportResp": {
            "type": "object",
            "properties": {
                "betsData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sports.BetDto"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "responsedto.BetResult": {
            "type": "object",
            "properties": {
                "creditAmount": {
                    "description": "SETTLED Bets",
                    "type": "number"
                },
                "eventId": {
                    "description": "EventId map to gameId in JSON to be inline with GAP",
                    "type": "string"
                },
                "marketId": {
                    "description": "MarketId map to roundId in JSON to be inline iwth GAP",
                    "type": "string"
                },
                "operatorId": {
                    "type": "string"
                },
                "reqId": {
                    "type": "string"
                },
                "rollbackAmount": {
                    "description": "+ve value to deposit to user, -ve value to deduct from user",
                    "type": "number"
                },
                "rollbackReason": {
                    "description": "RollbackType   string  `json:\"rollbackType\"`   // rollback / void / cancelled / expired / lapsed / deleted",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "responsedto.BetStatus": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.BetsResultRespDto": {
            "type": "object",
            "properties": {
                "betsResult": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.BetResult"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.BetsStatusRespDto": {
            "type": "object",
            "properties": {
                "betsStatus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.BetStatus"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.CancelBetResp": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "string"
                },
                "sizeCancelled": {
                    "type": "number"
                },
                "sizeMatched": {
                    "type": "number"
                },
                "sizeRemaining": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.CancelBetRespDto": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "cancelBetsResp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.CancelBetResp"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.DefaultRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.GetAllBetsRespDto": {
            "type": "object",
            "properties": {
                "allBets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.AllBetDto"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.GetCacheResp": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "respJson": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.GetLicenseStatusRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "licenseStatus": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.GetMatchedBetsRespDto": {
            "type": "object",
            "properties": {
                "betIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.IsMatchedStatus"
                    }
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.IsMatchedStatus": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "betStatus": {
                    "type": "string"
                },
                "isMatched": {
                    "type": "boolean"
                },
                "oddValue": {
                    "type": "number"
                },
                "sizeMatched": {
                    "type": "number"
                },
                "sizeRemaining": {
                    "type": "number"
                }
            }
        },
        "responsedto.MarketResult": {
            "type": "object",
            "properties": {
                "eventId": {
                    "description": "Unique event id",
                    "type": "string"
                },
                "marketId": {
                    "description": "Unique Id of the market",
                    "type": "string"
                },
                "providerId": {
                    "description": "Dream / BetFair / SportRadar",
                    "type": "string"
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "fancy scrore ex: 45 NO, 46 YES",
                    "type": "number"
                },
                "sportId": {
                    "description": "1 / 2 / 4",
                    "type": "string"
                },
                "status": {
                    "description": "OPEN / MAPPED / INPROGRESS / SETTLED / VOIDED / CANCELLED / SUSPENDED",
                    "type": "string"
                }
            }
        },
        "responsedto.MarketsResultRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "marketsResult": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.MarketResult"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.OddsData": {
            "type": "object",
            "properties": {
                "oddsAt": {
                    "description": "Date in readable string format in UTC (from UNIX timestamp)",
                    "type": "string"
                },
                "oddsKey": {
                    "description": "BEFORE / CURRENT / AFTER",
                    "type": "string"
                },
                "oddsValue": {
                    "type": "number"
                }
            }
        },
        "responsedto.OpenBetDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "betType": {
                    "type": "string"
                },
                "eventId": {
                    "type": "string"
                },
                "isUnmatched": {
                    "type": "boolean"
                },
                "marketId": {
                    "type": "string"
                },
                "marketName": {
                    "type": "string"
                },
                "marketType": {
                    "type": "string"
                },
                "oddValue": {
                    "type": "number"
                },
                "oddsHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.OddsData"
                    }
                },
                "runnerId": {
                    "type": "string"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "type": "number"
                },
                "sportId": {
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                }
            }
        },
        "responsedto.OpenBetsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "openBets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.OpenBetDto"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.PlaceBetRespDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "type": "string"
                },
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.SportRadarCancelBetRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "responsedto.UserBetStatusRespDto": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "betErrorMsg": {
                    "description": "bet placement failure message",
                    "type": "string"
                },
                "betId": {
                    "description": "Last Bet Id",
                    "type": "string"
                },
                "betStatus": {
                    "description": "PENDING / COMPLETED / CANCELLED / EXPIRED",
                    "type": "string"
                },
                "errorDescription": {
                    "description": "ERROR Description if RS_ERROR",
                    "type": "string"
                },
                "openBets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responsedto.OpenBetDto"
                    }
                },
                "requestTime": {
                    "description": "Last BET request time",
                    "type": "integer"
                },
                "status": {
                    "description": "RS_OK / RS_ERROR",
                    "type": "string"
                }
            }
        },
        "responsedto.ValidateOddsRespDto": {
            "type": "object",
            "properties": {
                "errorDescription": {
                    "type": "string"
                },
                "eventDate": {
                    "type": "integer"
                },
                "eventStatus": {
                    "type": "string"
                },
                "isValid": {
                    "type": "boolean"
                },
                "matchedOddValue": {
                    "type": "number"
                },
                "oddsList": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "sports.BetDetailsDto": {
            "type": "object",
            "properties": {
                "betType": {
                    "description": "BACK/LAY",
                    "type": "string"
                },
                "competitionName": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "isUnmatched": {
                    "description": "For BetFair. Default is false",
                    "type": "boolean"
                },
                "marketName": {
                    "description": "for soccer, match_odds or goal_markets, can be avoided",
                    "type": "string"
                },
                "marketType": {
                    "description": "MATCH_ODDS/BOOK_MAKER/GOAL_MARKETS/FANCY_MARKET/",
                    "type": "string"
                },
                "oddValue": {
                    "type": "number"
                },
                "runnerId": {
                    "description": "?? what is for fancy",
                    "type": "string"
                },
                "runnerName": {
                    "description": "?? what is for fancy",
                    "type": "string"
                },
                "sessionOutcome": {
                    "description": "fancy scrore ex: 45 NO, 46 YES",
                    "type": "number"
                },
                "sportName": {
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                }
            }
        },
        "sports.BetDto": {
            "type": "object",
            "properties": {
                "betDetails": {
                    "$ref": "#/definitions/sports.BetDetailsDto"
                },
                "betId": {
                    "type": "string"
                },
                "betReq": {
                    "$ref": "#/definitions/sports.BetReqDto"
                },
                "commLevel": {
                    "type": "string"
                },
                "commission": {
                    "type": "number"
                },
                "competitionId": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "DateTime in Unix seconds",
                    "type": "integer"
                },
                "eventId": {
                    "type": "string"
                },
                "eventKey": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "marketId": {
                    "type": "string"
                },
                "netAmount": {
                    "type": "number"
                },
                "oddsHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sports.OddsData"
                    }
                },
                "operatorId": {
                    "type": "string"
                },
                "partnerId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                },
                "resultReqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sports.ResultReqDto"
                    }
                },
                "rollbackReqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sports.RollbackReqDto"
                    }
                },
                "sportId": {
                    "type": "string"
                },
                "status": {
                    "description": "unmatched / open(rollback) / settled / void / cancel / deleted",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                },
                "userIp": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "sports.BetReqDto": {
            "type": "object",
            "properties": {
                "betId": {
                    "description": "only for BetFair",
                    "type": "string"
                },
                "debitAmount": {
                    "type": "number"
                },
                "oddsMatched": {
                    "type": "number"
                },
                "operatorAmount": {
                    "type": "number"
                },
                "operatorHold": {
                    "type": "number"
                },
                "platformAmount": {
                    "type": "number"
                },
                "platformHold": {
                    "type": "number"
                },
                "rate": {
                    "type": "integer"
                },
                "reqId": {
                    "type": "string"
                },
                "reqTime": {
                    "type": "integer"
                },
                "sizeCancelled": {
                    "type": "number"
                },
                "sizeLapsed": {
                    "type": "number"
                },
                "sizeMatched": {
                    "type": "number"
                },
                "sizePlaced": {
                    "type": "number"
                },
                "sizeRemaining": {
                    "type": "number"
                },
                "sizeVoided": {
                    "type": "number"
                }
            }
        },
        "sports.OddsData": {
            "type": "object",
            "properties": {
                "oddsAt": {
                    "description": "Date in readable string format in UTC (from UNIX timestamp)",
                    "type": "string"
                },
                "oddsKey": {
                    "description": "BEFORE / CURRENT / AFTER",
                    "type": "string"
                },
                "oddsValue": {
                    "type": "number"
                }
            }
        },
        "sports.ResultReqDto": {
            "type": "object",
            "properties": {
                "creditAmount": {
                    "type": "number"
                },
                "operatorAmount": {
                    "type": "number"
                },
                "platformAmount": {
                    "type": "number"
                },
                "reqId": {
                    "type": "string"
                },
                "reqTime": {
                    "type": "integer"
                },
                "runnerName": {
                    "type": "string"
                },
                "sessionOutcome": {
                    "type": "number"
                }
            }
        },
        "sports.RollbackReqDto": {
            "type": "object",
            "properties": {
                "operatorAmount": {
                    "type": "number"
                },
                "platformAmount": {
                    "type": "number"
                },
                "reqId": {
                    "type": "string"
                },
                "reqTime": {
                    "type": "integer"
                },
                "rollbackAmount": {
                    "type": "number"
                },
                "rollbackReason": {
                    "type": "string"
                }
            }
        }
    }
}